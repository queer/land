#!/usr/bin/env bash

# tar2ext4 from https://github.com/microsoft/hcsshim

set -euo pipefail

function log() {
    echo "[$(env TZ=UTC date +%Y-%m-%dT%H:%M:%S%z)] $*"
}

function require() {
  if [ -z "${1}" ]; then
    if [ -z "$2" ]; then
      log "\$$1 is not set but must be set."
    else
      log "\$$2 is not set but must be set."
    fi
    exit 1
  fi
}

function cleanup() {
  log "cleaning up..."
  cd $base_dir
  rm -rf ./work/
  rm -f init-shim/init.go*
}

if [[ $# -eq 0 ]] ; then
    log "must supply docker image as first arg"
    exit 1
fi

base_dir=$(pwd)
require $base_dir

cleanup
rm -f ./rootfs.ext4

log "setting up requirements..."
git submodule init
git submodule update --recursive --remote --progress
cd hcsshim # ./hcsshim
go build ./cmd/tar2ext4/
mv tar2ext4 $base_dir/tar2ext4
cd $base_dir # .

docker_image=$1
require $docker_image

rm -rf ./work
mkdir -p ./work

log "fetching docker image as needed..."
docker pull $docker_image
log "dumping docker image..."
docker save $docker_image > work/image.tar

cd work # ./work
tar -xf image.tar

log "extracting rootfs layers..."

# Config file contains cmd + env
config_file=$(cat manifest.json | jq -r '.[].Config')

command=$(cat $config_file | jq -r '.config.Cmd[0] | @sh' | tr -d \')
command_args=$(cat $config_file | jq -r 'del(.config.Cmd[0]).config.Cmd' | sed -e 's/^\[//' -e 's/^]//' | tr '\n' ' ')

entrypoint=$(cat $config_file | jq -r '.config.Entrypoint[0] | @sh' | tr -d \')
entrypoint_args=$(cat $config_file | jq -r 'del(.config.Entrypoint[0]).config.Entrypoint' | sed -e 's/^\[//' -e 's/^]//' | tr '\n' ' ' | sed 's/ *$//g')

if [ "$entrypoint" == "null" ]; then
  entrypoint=""
fi
if [ "$entrypoint_args" == "null" ]; then
  entrypoint_args=""
fi

env=($(cat $config_file | jq -r '.config.Env' | sed -e 's/^\[//' -e 's/^]//' | tr '\n' ' '))

# Manifest contains layers
layers=$(cat manifest.json | jq -r '.[].Layers | @sh' | tr -d \')

# Extract rootfs layers in order to build the final rootfs
mkdir -p ./rootfs
for layer in $layers; do
  log "extracting layer: $layer..."
  tar -xf $layer -C ./rootfs
done

log "setting up /sbin/init..."
cd .. # .

# Prepare the template
cp init-shim/init-tpl.go ./init-shim/init.go

# Template processing
sed -i -e "s|%EXE%|${command}|" ./init-shim/init.go
sed -i -e "s|\"%ENV%\"|${env}|" ./init-shim/init.go
sed -i -e "s|\"%ARGS%\"|${command_args}|" ./init-shim/init.go
sed -i -e "s|%ENTRYPOINT%|${entrypoint:-}|" ./init-shim/init.go
sed -i -e "s|\"%ENTRYPOINT_ARGS%\"|${entrypoint_args:-}|" ./init-shim/init.go

# log "generated init:"
# cat ./init-shim/init.go

# Build minimal init
go build ./init-shim/init.go

log "relocating init to /sbin/init..."
cd ./work/ # ./work
mkdir -pv rootfs/sbin
mv $base_dir/init rootfs/sbin/init

log "building final rootfs..."

# tar it up and turn it into an ext4 image
cd rootfs # ./work/rootfs
tar -cf ../rootfs.tar *

log "building ext4 image..."
cd .. # ./work
$base_dir/tar2ext4 -i ./rootfs.tar -o $base_dir/rootfs.ext4

# Remove the ro attr that tar2ext4 sets
tune2fs -O ^read-only $base_dir/rootfs.ext4

log "growing rootfs..."
# Grow the rootfs to 1GB
dd if=/dev/zero bs=1G seek=1 count=0 of=$base_dir/rootfs.ext4
resize2fs $base_dir/rootfs.ext4 1G
cd $base_dir # .

log "fetching kernel..."
[ -e kernel.bin ] || wget https://s3.amazonaws.com/spec.ccfc.min/img/hello/kernel/hello-vmlinux.bin -O kernel.bin

cleanup

log "all done!"
log "run with: ./boot"
